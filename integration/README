
This is an initial state for the new robust cache inplementation, initially working only on OS-X. It includes source for integration tests and a make procedure.

It is intended that this "integration" directory is retained as a place for long-running integration tests, but the new cache modules (alloc, rwlock and cache)
are added to the agent source as and when needed.

The aim of the integration tets is to test performance agains prolonged bursts of activity, and to test that the cache is robust when client processes die.

On OS-X, with 2 or 3 instances of "cache" (the test excutable) with a garbage collection thread and a TTL expiry thread running, the cache can process about 3
million operations a second and is fairly robust in that it seems to repair itself when you kill of any of the cache executables, and is now able to reset itself
when a process dies unrecoverably during a critical memory management operation.

------

The makefile generates the following executables:

*cache*
This is a simlulation of cache clients that each make rapid updates in multiple threads to a shared cache. There are the following command additional line
options, which are needed to run the integration tests:

--destroy will reinitialise shared memory
--gc will run a garbage collector thread, which kicks in every 2 secs.
--expire will run a TTL cache expiry thread, which kicks in every 3 secs to remove cache entries that have expired.
--error will trigger a memory reset

*alloc*
This isn a standalone performance test for the shared memory allocator in alloc.c. It can be run with native malloc in place of the memory allocator as a
kind of benchmark comparison (the shared memory one should be faster). It can also be run in multiple processes (though malloc can't compare with this). 

*rwlock*
This is a simple test of the rwlock module, in particular checking that writelocks are not starved when there are many concurrent readers.

------

There are three scripts that are used in these tests:

run_cache.sh will spawn an integration test instance and respawn it when it is finished

bad.sh will spawn a cache process and kill it randomly within 10 seconds.

error.sh will randomly trigger cache resets.

The test invloves running the background threads (cache --expire and cache --gc) as well as several instances of run_cache.sh, and a single instance of bad.sh,
and it now can survive for at least 4 hours without reduction in throughput (except during recovery) and without process failure. The simple script bad.sh causes
crashes at amny critical points, and the cache processing recovers and quickly goes back to a full operational state, which is known by only running instances of
run_cache.sh, showing that these processes are not compromised.

